{
  "_copyright": "2016-2018, Frederico Martins",
  "_author":    "Frederico Martins <http://github.com/fscm>",
  "_license":   "SPDX-License-Identifier: MIT",
  "variables": {
    "checksum_type":    "none",
    "checksum_value":   "",
    "docker_name":      "stretch",
    "headless":         "true",
    "os_arch":          "amd64",
    "os_codename":      "stretch",
    "os_version":       "9.3.0",
    "os_short_arch":    "64",
    "os_type":          "Debian_64",
    "system_disk_size": "8192",
    "system_domain":    "marsh",
    "system_hostname":  "stretch",
    "system_locale":    "en_US",
    "system_memory":    "384",
    "system_pwd":       "stretch",
    "system_timezone":  "UTC",
    "system_user":      "pollywog"
  },
  "builders": [
    {
      "name":                 "virtualbox",
      "type":                 "virtualbox-iso",
      "boot_wait":            "10s",
      "disk_size":            "{{user `system_disk_size`}}",
      "guest_additions_mode": "disable",
      "guest_os_type":        "{{user `os_type`}}",
      "hard_drive_interface": "sata",
      "headless":             "{{user `headless`}}",
      "http_directory":       "http",
      "iso_checksum":         "{{user `checksum_value`}}",
      "iso_checksum_type":    "{{user `checksum_type`}}",
      "iso_target_path":      "../builds/cache/debian-{{user `os_version`}}-{{user `os_arch`}}-netinst.iso",
      "output_directory":     "../builds/sandbox/{{build_type}}",
      "shutdown_command":     "echo '{{user `system_pwd`}}' | sudo -S /sbin/shutdown -hP now",
      "skip_export":          true,
      "ssh_password":         "{{user `system_pwd`}}",
      "ssh_port":             22,
      "ssh_username":         "{{user `system_user`}}",
      "ssh_wait_timeout":     "3600s",
      "vm_name":              "{{user `os_codename`}}{{user `os_short_arch`}}-{{isotime \"20060102150405\"}}",
      "boot_command": [
        "<esc><wait>",
        "auto ",
        "preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg ",
        "netcfg/get_hostname={{user `system_hostname`}} ",
        "netcfg/get_domain={{user `system_domain`}} ",
        "time/zone={{user `system_timezone`}} ",
        "passwd/root-password={{user `system_pwd`}} ",
        "passwd/root-password-again={{user `system_pwd`}} ",
        "passwd/username={{user `system_user`}} ",
        "passwd/user-password={{user `system_pwd`}} ",
        "passwd/user-password-again={{user `system_pwd`}}<enter>"
      ],
      "iso_urls": [
        "../builds/isos/debian-{{user `os_version`}}-{{user `os_arch`}}-netinst.iso",
        "http://cdimage.debian.org/debian-cd/{{user `os_version`}}/{{user `os_arch`}}/iso-cd/debian-{{user `os_version`}}-{{user `os_arch`}}-netinst.iso",
        "http://cdimage.debian.org/cdimage/archive/{{user `os_version`}}/{{user `os_arch`}}/iso-cd/debian-{{user `os_version`}}-{{user `os_arch`}}-netinst.iso"
      ],
      "vboxmanage": [
        ["modifyvm", "{{.Name}}", "--memory", "{{user `system_memory`}}"],
        ["modifyvm", "{{.Name}}", "--vram", "12"],
        ["modifyvm", "{{.Name}}", "--pae", "off"],
        ["modifyvm", "{{.Name}}", "--cpus", "1"],
        ["modifyvm", "{{.Name}}", "--hwvirtex", "on"],
        ["modifyvm", "{{.Name}}", "--paravirtprovider", "legacy"],
        ["modifyvm", "{{.Name}}", "--nestedpaging", "on"],
        ["modifyvm", "{{.Name}}", "--accelerate3d", "off"],
        ["modifyvm", "{{.Name}}", "--accelerate2dvideo", "off"],
        ["modifyvm", "{{.Name}}", "--chipset", "piix3"],
        ["modifyvm", "{{.Name}}", "--boot1", "dvd"],
        ["modifyvm", "{{.Name}}", "--boot2", "disk"],
        ["modifyvm", "{{.Name}}", "--boot3", "none"],
        ["modifyvm", "{{.Name}}", "--boot4", "none"],
        ["modifyvm", "{{.Name}}", "--mouse", "ps2"],
        ["modifyvm", "{{.Name}}", "--keyboard", "ps2"],
        ["modifyvm", "{{.Name}}", "--audio", "none"],
        ["modifyvm", "{{.Name}}", "--usb", "off"],
        ["modifyvm", "{{.Name}}", "--vrde", "off"]
      ]
    }
  ],
  "provisioners": [
    {
      "type":        "file",
      "source":      "files/debootstrap/",
      "destination": "/tmp"
    },
    {
      "type":           "shell",
      "inline_shebang": "/bin/bash -e",
      "environment_vars": [
        "DEBIAN_FRONTEND=noninteractive"
      ],
      "inline": [
        "unset HISTFILE",
        "history -cw",
        "echo === System Packages ===",
        "curl -fsSL https://apt.dockerproject.org/gpg | sudo apt-key add -",
        "echo 'deb https://apt.dockerproject.org/repo debian-{{user `os_codename`}} main' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
        "sudo apt-get -qq update",
        "sudo apt-get -y -qq install --no-install-recommends curl vim wget dbus coreutils binutils dpkg-dev debootstrap debian-archive-keyring docker-engine",
        "echo === System Settings ===",
        "sudo update-locale LC_CTYPE={{user `system_locale`}}.UTF-8",
        "echo === Deboostrap Settings ===",
        "sudo rm /usr/share/debootstrap/scripts/{{user `os_codename`}}",
        "sudo cp /tmp/{{user `os_codename`}} /usr/share/debootstrap/scripts/{{user `os_codename`}}",
        "sudo chown root:root /usr/share/debootstrap/scripts/{{user `os_codename`}}",
        "sudo chmod 0644 /usr/share/debootstrap/scripts/{{user `os_codename`}}",
        "echo === Docker Build ===",
        "sudo mkdir -p /build",
        "ROOTFS=$(sudo mktemp -d -p /build {{user `os_codename`}}.XXXXXX)",
        "sudo /usr/sbin/debootstrap --variant=docker --arch=amd64 --foreign {{user `os_codename`}} ${ROOTFS}",
        "sudo chroot ${ROOTFS} bash debootstrap/debootstrap --second-stage",
        "## echo -e 'LANG=\"en_US.UTF-8\"\\nLC_CTYPE=\"en_US.UTF-8\"' | sudo tee ${ROOTFS}/etc/default/locale > /dev/null",
        "echo 'deb http://deb.debian.org/debian {{user `os_codename`}} main non-free contrib' | sudo tee ${ROOTFS}/etc/apt/sources.list > /dev/null",
        "echo 'deb http://security.debian.org/ {{user `os_codename`}}/updates main contrib non-free' | sudo tee -a ${ROOTFS}/etc/apt/sources.list > /dev/null",
        "echo 'deb http://deb.debian.org/debian {{user `os_codename`}}-updates main contrib non-free' | sudo tee -a ${ROOTFS}/etc/apt/sources.list > /dev/null",
        "sudo chroot ${ROOTFS} apt-get -qq update",
        "sudo chroot ${ROOTFS} apt-get -y -q --no-install-recommends -o Dpkg::Options::=\"--force-confdef\" upgrade",
        "sudo chroot ${ROOTFS} dpkg-divert --local --rename --add /sbin/initctl",
        "echo -e '#!/bin/sh\\nexit 101' | sudo tee ${ROOTFS}/usr/sbin/policy-rc.d > /dev/null",
        "echo -e '#!/bin/sh\\nexit 0' | sudo tee ${ROOTFS}/sbin/initctl > /dev/null",
        "sudo chmod 0755 ${ROOTFS}/usr/sbin/policy-rc.d ${ROOTFS}/sbin/initctl",
        "sudo chroot ${ROOTFS} apt-get clean",
        "## echo 'dash dash/sh boolean false' | sudo chroot ${ROOTFS} debconf-set-selections",
        "## sudo chroot ${ROOTFS} dpkg-reconfigure -f noninteractive dash",
        "sudo rm -f ${ROOTFS}/etc/apt/apt.conf.d/01autoremove-kernels",
        "APT_GET_CLEAN='\"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true\";'",
        "echo -e 'DPkg::Post-Invoke { ${APT_GET_CLEAN} };\\nAPT::Update::Post-Invoke { ${APT_GET_CLEAN} };\\nDir::Cache::pkgcache \"\";\\nDir::Cache::srcpkgcache \"\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-clean > /dev/null",
        "echo -e 'DPkg::Use-Pty \"false\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-no-dpkg-output > /dev/null",
        "echo -e 'Acquire::Languages \"none\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-no-languages > /dev/null",
        "echo -e 'Acquire::GzipIndexes \"true\";\\nAcquire::CompressionTypes::Order:: \"gz\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-gzip-indexes > /dev/null",
        "echo -e 'APT::AutoRemove::SuggestsImportant \"false\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-autoremove-suggests > /dev/null",
        "echo -e 'APT::Install-Recommends \"false\";' | sudo tee -a ${ROOTFS}/etc/apt/apt.conf.d/90docker-no-recommends > /dev/null",
        "## if strings ${ROOTFS}/usr/bin/dpkg | grep -q unsafe-io; then echo 'force-unsafe-io' | sudo tee -a ${ROOTFS}/etc/dpkg/dpkg.cfg.d/90docker-apt-speedup > /dev/null; fi",
        "echo 'force-unsafe-io' | sudo tee -a ${ROOTFS}/etc/dpkg/dpkg.cfg.d/90docker-apt-speedup > /dev/null",
        "echo -e 'path-exclude=/usr/share/doc/*\\npath-exclude=/usr/share/info/*\\npath-exclude=/usr/share/locale/*\\npath-exclude=/usr/share/man/*\\npath-include=/usr/share/doc/*/copyright' | sudo tee -a ${ROOTFS}/etc/dpkg/dpkg.cfg.d/90docker-excludes > /dev/null",
        "sudo bash -c \"rm -rf ${ROOTFS}/usr/share/info/*\"",
        "sudo bash -c \"rm -rf ${ROOTFS}/usr/share/locale/*\"",
        "sudo bash -c \"rm -rf ${ROOTFS}/usr/share/man/*\"",
        "sudo bash -c \"rm -rf ${ROOTFS}/var/cache/apt/*\"",
        "sudo bash -c \"rm -rf ${ROOTFS}/var/lib/apt/lists/*\"",
        "sudo bash -c \"rm -rf ${ROOTFS}/var/log/*\"",
        "sudo find ${ROOTFS}/usr/share/doc -mindepth 1 -not -name copyright -not -type d -delete",
        "sudo find ${ROOTFS}/usr/share/doc -mindepth 1 -type d -empty -delete",
        "sudo find ${ROOTFS}/var/cache -type f -delete",
        "## sudo chroot ${ROOTFS} dpkg-query -W -f '${Installed-Size}k\\t${Package}\\n' | sort -k 1 -h",
        "## sudo du -sh ${ROOTFS}",
        "## sudo du -sh ${ROOTFS}/* | sort -h",
        "sudo sync",
        "sudo tar cf {{user `docker_name`}}.tar -C ${ROOTFS} .",
        "echo === Docker Build Test ===",
        "sudo docker import {{user `docker_name`}}.tar test:{{user `docker_name`}}",
        "echo -n '[TEST] Check if apt command is installed... '",
        "sudo docker run --rm test:{{user `docker_name`}} dpkg -s apt &>/dev/null && echo 'OK' || echo 'Failed'",
        "echo -n '[TEST] Check package installation with apt... '",
        "sudo docker run --rm -e DEBIAN_FRONTEND=noninteractive test:{{user `docker_name`}} bash -c 'apt-get -qq update && apt-get -y -qq install less &>/dev/null && less --help &>/dev/null' && echo 'OK' || echo 'Failed'",
        "echo -n '[TEST] Check if debootstrap dir was removed... '",
        "sudo docker run --rm test:{{user `docker_name`}} bash -c '[[ ! -e /debootstrap ]]' && echo 'OK' || echo 'Failed'",
        "echo -n '[TEST] Check if packages are correctly installed... '",
        "MISSING=$(sudo docker run --rm test:{{user `docker_name`}} bash -c 'apt-get -qq -s install $(dpkg-query -W -f \"\\${Package} \") | wc -l'); [[ $MISSING -eq 0 ]] && echo 'OK' || echo 'Failed'",
        "echo === Transfer Docker Image ==="
      ]
    },
    {
      "type":        "file",
      "source":      "{{user `docker_name`}}.tar",
      "destination": "../builds/providers/docker/{{user `docker_name`}}.tar",
      "direction":   "download"
    },
    {
      "type":           "shell",
      "inline_shebang": "/bin/bash -e",
      "inline": [
        "echo ' ------------------------------------------------------------------------------'",
        "echo '  Docker image transfered to:'",
        "echo '  ../builds/providers/docker/{{user `docker_name`}}.tar'",
        "echo ' ------------------------------------------------------------------------------'",
        "echo === System Cleanup ===",
        "## docker image rm test:{{user `docker_name`}}",
        "## sudo rm -rf {{user `docker_name`}}.tar",
        "## sudo rm -rf /build",
        "echo === All Done ==="
      ]
    }
  ]
}
